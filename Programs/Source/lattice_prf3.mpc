### Lattice PRF over GF(2^k)
# Run with ./Scripts/compile-run.py -E mal-shamir -g 12 lattice_prf3

from Compiler.types import *
from Compiler.library import for_range, print_ln
from random import randint

def key_gen(m: int, rand_cgf2n):
    a = cgf2n.Matrix(m, m)
    for i in range(m):
        for j in range(m):
            a[i][j] = rand_cgf2n()

    k = sgf2n.Array(m)
    @for_range(m)
    def f(i):
        k[i] = sgf2n.get_random_triple()[0]
    return a, k

def eval(a: Matrix, k: Array, log2q: int, log2p: int):
    r: sgf2n = sum(a * k)
    return r.right_shift(log2q - log2p)

def rand_cgf2n_func(log2q: int):
    return lambda: cgf2n(randint(0, 2**log2q-1))

def main():
    n = 20
    log2q = 12
    log2p = 8
    m = n * log2q
    l = 256

    print(f"Benchmarking Lattice PRF with: l={l}, m={m}, log2(q)={log2q}, log2(p)={log2p}")
    
    a, k = key_gen(m, rand_cgf2n_func(log2q))

    r = eval(a, k, log2q, log2p)

    print_ln("output = %s", r.reveal())

main()
